generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BuyOffer {
  buyOfferId            Int           @id
  userId                Int
  stockId               Int
  unitBuyPrice          Int
  unitBuyPriceDecimal   Int
  quantity              Int
  created               DateTime      @db.Timestamptz(6)
  status                Int           @default(0)
  BuyOfferToStock       Stock         @relation(fields: [stockId], references: [stockId], onDelete: Cascade, map: "Stock")
  BuyOfferToUser        User          @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "User")
  BuyOfferToTransaction Transaction[]
}

model Company {
  companyId      Int     @id
  name           String  @db.VarChar
  description    String?
  CompanyToStock Stock[]
}

model SellOffer {
  sellOfferId            Int           @id
  userId                 Int
  userStockId            Int
  unitSellPrice          Int
  unitSellPriceDecimal   Int
  quantity               Int
  created                DateTime      @db.Timestamptz(6)
  status                 Int           @default(0)
  SellOfferToUser        User          @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "User")
  SellOfferToTransaction Transaction[]
}

model Stock {
  stockId                  Int                 @id
  companyId                Int
  quantity                 Int
  price                    Int
  priceDecimal             Int
  StockToCompany           Company             @relation(fields: [companyId], references: [companyId], onDelete: Cascade, onUpdate: NoAction, map: "Company")
  StockToBuyOffer          BuyOffer[]
  StockToStockPriceHistory StockPriceHistory[]
  StockToUserStock         UserStock?
}

model StockPriceHistory {
  stockPriceHistoryId      Int      @id
  stockId                  Int
  price                    Int
  priceDecimal             Int
  changeDate               DateTime @db.Timestamptz(6)
  StockPriceHistoryToStock Stock    @relation(fields: [stockId], references: [stockId], onDelete: NoAction, onUpdate: NoAction, map: "Stock")
}

model Transaction {
  transactionId          Int       @id
  buyOfferId             Int
  sellOfferId            Int
  status                 Int       @default(0)
  date                   DateTime  @db.Timestamptz(6)
  sellerId               Int
  buyerId                Int
  TransactionToBuyOffer  BuyOffer  @relation(fields: [buyOfferId], references: [buyOfferId], onDelete: Cascade, map: "BuyOffer")
  TransactionToBuyer     User      @relation("TransactionToBuyer", fields: [buyerId], references: [userId], onDelete: Cascade, map: "Buyer")
  TransactionToSellOffer SellOffer @relation(fields: [sellOfferId], references: [sellOfferId], onDelete: Cascade, map: "SellOffer")
  TransactionToSeller    User      @relation("TransactionToSeller", fields: [sellerId], references: [userId], onDelete: Cascade, map: "Seller")
}

model User {
  userId                  Int           @id
  email                   String        @db.VarChar
  password                String        @db.VarChar
  name                    String        @db.VarChar
  surname                 String        @db.VarChar
  balance                 Int
  balanceDecimal          Int
  BuyOffer                BuyOffer[]
  SellOffer               SellOffer[]
  UserToTransactionBuyer  Transaction[] @relation("TransactionToBuyer")
  UserToTransactionSeller Transaction[] @relation("TransactionToSeller")
  UserToUserStock         UserStock[]
}

model UserStock {
  userStockId      Int   @id
  userId           Int
  stockQuantity    Int
  UserStockToStock Stock @relation(fields: [userStockId], references: [stockId], onDelete: NoAction, onUpdate: NoAction, map: "Stock")
  UserStockToUser  User  @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "User")
}
