generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BuyOffer {
  buyOfferId            Int           @id @default(autoincrement())
  userId                Int
  stockId               Int
  unitBuyPriceCents     Int
  quantity              Int
  created               DateTime      @db.Timestamptz(6) @default(now())
  status                Int           @default(0)
  BuyOfferToUser        User          @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "User")
  BuyOfferToTransaction Transaction[]
}

model Company {
  companyId                          Int     @id @default(autoincrement())
  name                               String  @db.VarChar
  description                        String?
  CompanyToStock                     Stock[]
  CompanyToUserStock                 UserStock[]
  CompanyToCompanyStockPriceHistory  CompanyStockPriceHistory[]
}

model SellOffer {
  sellOfferId            Int           @id @default(autoincrement())
  userId                 Int
  userStockId            Int
  unitSellPriceCents     Int
  quantity               Int
  created                DateTime      @db.Timestamptz(6) @default(now())
  status                 Int           @default(0)
  SellOfferToUser        User          @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "User")
  SellOfferToTransaction Transaction[]
}

model Stock {
  stockId                  Int                 @id @default(autoincrement())
  companyId                Int
  quantity                 Int
  priceCents               Int
  userId                   Int
  StockToCompany           Company             @relation(fields: [companyId], references: [companyId], onDelete: Cascade, onUpdate: NoAction, map: "Company")
  StockToUser  User  @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "User")
}

model CompanyStockPriceHistory {
  companyStockPriceHistoryId        Int        @id @default(autoincrement())
  companyId                         Int
  priceCents                        Int
  changeDate                        DateTime   @db.Timestamptz(6) @default(now())
  CompanyStockPriceHistoryToCompany Company    @relation(fields: [companyId], references: [companyId], onDelete: NoAction, onUpdate: NoAction, map: "Company")
}

model Transaction {
  transactionId          Int       @id @default(autoincrement())
  buyOfferId             Int
  sellOfferId            Int
  status                 Int       @default(0)
  date                   DateTime  @db.Timestamptz(6) @default(now())
  sellerId               Int
  buyerId                Int
  TransactionToBuyOffer  BuyOffer  @relation(fields: [buyOfferId], references: [buyOfferId], onDelete: Cascade, map: "BuyOffer")
  TransactionToBuyer     User      @relation("TransactionToBuyer", fields: [buyerId], references: [userId], onDelete: Cascade, map: "Buyer")
  TransactionToSellOffer SellOffer @relation(fields: [sellOfferId], references: [sellOfferId], onDelete: Cascade, map: "SellOffer")
  TransactionToSeller    User      @relation("TransactionToSeller", fields: [sellerId], references: [userId], onDelete: Cascade, map: "Seller")
}

model User {
  userId                  Int           @id @default(autoincrement())
  email                   String        @db.VarChar @unique
  password                String        @db.VarChar
  passwordSalt			      String		    @db.VarChar
  name                    String        @db.VarChar
  surname                 String        @db.VarChar
  balanceCents            Int
  BuyOffer                BuyOffer[]
  SellOffer               SellOffer[]
  UserToTransactionBuyer  Transaction[] @relation("TransactionToBuyer")
  UserToTransactionSeller Transaction[] @relation("TransactionToSeller")
  UserToUserStock         UserStock[]
  UserToStock         Stock[]
}

model UserStock {
  userStockId      Int   @id @default(autoincrement())
  userId           Int
  stockQuantity    Int
  companyId        Int
  UserStockToUser  User  @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "User")
  UserStockToCompany Company @relation(fields: [companyId], references: [companyId], onDelete: Cascade, onUpdate: NoAction, map: "Company")
}
